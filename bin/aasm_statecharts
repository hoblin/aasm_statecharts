#!/usr/bin/env ruby

require 'optparse'
require_relative '../lib/aasm_statechart'


def parse_command_line!
  options = {
    all: false,
    directory: './doc',
    format: 'png',
  }

  formats = AASM_StateChart::Renderer::FORMATS.join(', ')

  parser = OptionParser.new do |opts|
    opts.banner = "Usage: aasm_statechart [options] <model> [models ...]\n   Where <model> is the lower case, underscored model name.  Ex:  'my_model' for the class MyModel\n\n   Options:"

    opts.on_tail('-v', '--version', 'version of this gem') do
      puts AASM_StateChart::VERSION
      exit(0)
    end

    opts.on('-a', '--all', 'Render all models using AASM') do
      options[:all] = true
    end

    opts.on('-d', '--directory directory',
            "Output to a specific directory (default: #{options[:directory]})") do |directory|
      options[:directory] = directory
    end

    opts.on('-t', '--table', 'Create a state transition table') do
      options[:transition_table] = true
    end

    opts.on('-f', '--file-type type',
            "Output in the specified format (default: #{options[:format]}), which must be one of the following: #{formats}.") do |format|
      format = format.downcase

      unless AASM_StateChart::Renderer::FORMATS.include?(format)
        puts "error: #{format} is not a recognized file format."
        puts "The file format must be one of the following: #{formats}."
        exit(1)
      end

      options[:format] = format
    end

    opts
  end

  parser.parse!

  if !options[:all] && ARGV.empty?
    puts parser
    exit(1)
  end

  [options, ARGV]
end


def load_rails!
  unless File.exists? './config/environment.rb'
    script_name = File.basename $PROGRAM_NAME
    puts 'error: unable to find ./config/environment.rb.'
    puts "Please run #{script_name} from the root of your Rails application."
    exit(1)
  end

  require './config/environment'
end


def ensure_directory!(directory)
  Dir.mkdir(directory) unless Dir.exists? directory
end


def collect_models(model_names)
  model_names.map { |model_name| model_name.classify.constantize }
end


def collect_all_models
  Rails::Application.subclasses.first.eager_load!
  ActiveRecord::Base.descendants.select { |klass| klass.respond_to? :aasm }
end


options, model_names = parse_command_line!
load_rails!
ensure_directory! options[:directory]

models = options[:all] ? collect_all_models : collect_models(model_names)
show_transition_table = options[:transition_table]

models.each do |klass|
  name = klass.name.underscore
  renderer = AASM_StateChart::Renderer.new(klass, show_transition_table)
  filename = "#{options[:directory]}/#{name}.#{options[:format]}"
  renderer.save(filename, format: options[:format])
  puts " * rendered #{name} to #{filename}"
end
